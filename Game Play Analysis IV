Table: Activity
+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| player_id    | int     |
| device_id    | int     |
| event_date   | date    |
| games_played | int     |
+--------------+---------+

(player_id, event_date) is the primary key of this table.
This table shows the activity of players of some game.
Each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on some day using some device.

The query result format is in the following example:
Activity table:
+-----------+-----------+------------+--------------+
| player_id | device_id | event_date | games_played |
+-----------+-----------+------------+--------------+
| 1         | 2         | 2016-03-01 | 5            |
| 1         | 2         | 2016-03-02 | 6            |
| 2         | 3         | 2017-06-25 | 1            |
| 3         | 1         | 2016-03-02 | 0            |
| 3         | 4         | 2018-07-03 | 5            |
+-----------+-----------+------------+--------------+

QUESTION:

Write an SQL query that reports the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. 
In other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, 
then divide that number by the total number of players.

SOLUTION:

WITH lagged AS (
    SELECT player_id,
           MIN(event_date) OVER (PARTITION BY player_id 
               ORDER BY event_date) as min_event_date,
           LEAD(event_date) OVER (PARTITION BY player_id 
               ORDER BY event_date) as next_date  
    FROM Activity)
    
SELECT ROUND(SUM(CASE WHEN next_date = min_event_date + INTERVAL '1' DAY THEN 1 
                   ELSE 0 END)::NUMERIC/COUNT(DISTINCT player_id),2) AS retention
FROM lagged
